<?php

namespace app\models;

use app\components\FilterBehavior;
use app\models\Message;
use Yii;

/**
 * This is the model class for table "source_message".
 *
 * @property int $id
 * @property string $category
 * @property string $message
 *
 * @property Message[] $messages
 */
class SourceMessage extends \yii\db\ActiveRecord
{

    /**
     * @return string
     */
    public static function tableName()
    {
        return 'source_message';
    }

    public function behaviors()
    {
        return [
            FilterBehavior::class,
        ];
    }

    public static function find()
    {
        return new SourceMessageQuery(get_called_class());
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['message'], 'string'],
            [['category'], 'string', 'max' => 255],
            [['message', 'category'], 'unique', 'targetAttribute' => ['message', 'category']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app_model', 'ID'),
            'category' => Yii::t('app_model', 'Category'),
            'message' => Yii::t('app_model', 'Message'),
        ];
    }

    public function getMessages()
    {
        return $this->hasMany(Message::class, ['id' => 'id'])->indexBy('language');
    }

    /**
     * @return array|SourceMessage[]
     */
    public static function getCategories()
    {
        return SourceMessage::find()->select('category')->distinct('category')->asArray()->all();
    }

    public function initMessages()
    {
        $messages = [];
        foreach (Yii::$app->controller->langs as $language) {
            $language = $language->local;
            if (!isset($this->messages[$language])) {
                $message = new Message;
                $message->language = $language;
                $message->translation = $this->message;
                $messages[$language] = $message;
            } else {
                $messages[$language] = $this->messages[$language];
            }
        }
        $this->populateRelation('messages', $messages);
    }

    public function saveMessages()
    {
        /** @var Message $message */
        foreach ($this->messages as $message) {            
            $mes = Message::find()->where(['language' => $message->language, 'translation' => $message->translation])->one();
            if(empty($mes)){
                $this->link('messages', $message);
                if(!$message->save()) return false;
            }
            
        }

        return true;
    }
    public function afterSave($insert, $changedAttributes)
    {
        Yii::$app->cache->delete(Yii::$app->cache->keys('source-message-*'));
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function isTranslated()
    {
        if(empty($this->messages)) return false;
        foreach ($this->messages as $message){
            if (!$message->translation || $message->translation == $this->message) return false;
        }

        return true;
    }

}
